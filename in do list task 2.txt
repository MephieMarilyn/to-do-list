import sqlite3
def create_connection():
    return sqlite3.connect('todo.db')
def create_table():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY,
            title TEXT NOT NULL,
            description TEXT,
            priority INTEGER,
            due_date TEXT,
            category TEXT,
            completed BOOLEAN NOT NULL CHECK (completed IN (0, 1))
        )
    ''')
    conn.commit()
    conn.close()

create_table()
def add_task(title, description, priority, due_date, category):
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO tasks (title, description, priority, due_date, category, completed)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (title, description, priority, due_date, category, 0))
    conn.commit()
    conn.close()

def delete_task(task_id):
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('DELETE FROM tasks WHERE id = ?', (task_id,))
    conn.commit()
    conn.close()

def update_task(task_id, title, description, priority, due_date, category, completed):
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE tasks
        SET title = ?, description = ?, priority = ?, due_date = ?, category = ?, completed = ?
        WHERE id = ?
    ''', (title, description, priority, due_date, category, completed, task_id))
    conn.commit()
    conn.close()

def view_tasks():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM tasks')
    tasks = cursor.fetchall()
    conn.close()
    return tasks

def mark_task_as_complete(task_id):
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('UPDATE tasks SET completed = 1 WHERE id = ?', (task_id,))
    conn.commit()
    conn.close()

def filter_tasks_by_category(category):
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM tasks WHERE category = ?', (category,))
    tasks = cursor.fetchall()
    conn.close()
    return tasks

def filter_tasks_by_due_date(due_date):
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM tasks WHERE due_date = ?', (due_date,))
    tasks = cursor.fetchall()
    conn.close()
    return tasks

def main():
    while True:
        print("\nTo-Do List Application")
        print("1. Add Task")
        print("2. Delete Task")
        print("3. Update Task")
        print("4. View Tasks")
        print("5. Mark Task as Complete")
        print("6. Filter Tasks by Category")
        print("7. Filter Tasks by Due Date")
        print("8. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            title = input("Enter task title: ")
            description = input("Enter task description: ")
            priority = int(input("Enter task priority (1-5): "))
            due_date = input("Enter task due date (YYYY-MM-DD): ")
            category = input("Enter task category: ")
            add_task(title, description, priority, due_date, category)
            print("Task added successfully.")
        
        elif choice == '2':
            task_id = int(input("Enter task ID to delete: "))
            delete_task(task_id)
            print("Task deleted successfully.")
        
        elif choice == '3':
            task_id = int(input("Enter task ID to update: "))
            title = input("Enter new task title: ")
            description = input("Enter new task description: ")
            priority = int(input("Enter new task priority (1-5): "))
            due_date = input("Enter new task due date (YYYY-MM-DD): ")
            category = input("Enter new task category: ")
            completed = int(input("Enter 1 if task is completed, otherwise 0: "))
            update_task(task_id, title, description, priority, due_date, category, completed)
            print("Task updated successfully.")
        
        elif choice == '4':
            tasks = view_tasks()
            print("\nID | Title | Description | Priority | Due Date | Category | Completed")
            print("--------------------------------------------------------------")
            for task in tasks:
                print(f"{task[0]} | {task[1]} | {task[2]} | {task[3]} | {task[4]} | {task[5]} | {task[6]}")
        
        elif choice == '5':
            task_id = int(input("Enter task ID to mark as complete: "))
            mark_task_as_complete(task_id)
            print("Task marked as complete.")
        
        elif choice == '6':
            category = input("Enter category to filter by: ")
            tasks = filter_tasks_by_category(category)
            print("\nID | Title | Description | Priority | Due Date | Category | Completed")
            print("--------------------------------------------------------------")
            for task in tasks:
                print(f"{task[0]} | {task[1]} | {task[2]} | {task[3]} | {task[4]} | {task[5]} | {task[6]}")
        
        elif choice == '7':
            due_date = input("Enter due date (YYYY-MM-DD) to filter by: ")
            tasks = filter_tasks_by_due_date(due_date)
            print("\nID | Title | Description | Priority | Due Date | Category | Completed")
            print("--------------------------------------------------------------")
            for task in tasks:
                print(f"{task[0]} | {task[1]} | {task[2]} | {task[3]} | {task[4]} | {task[5]} | {task[6]}")
        
        elif choice == '8':
            break
        
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
